import React, { useEffect, useState, useCallback } from 'react';
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  StyleSheet,
  View,
  Alert,
  TextInput,
  ScrollView,
  DeviceEventEmitter,
} from 'react-native';
import BleManager, { Peripheral } from 'react-native-ble-manager';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
const REAL_TEST_COMMANDS = {
  quickTest: ['ATZ', 'ATE0', 'ATSP0', '0100', '010C', '010D'],
  initialization: ['ATZ', 'ATE0', 'ATL0', 'ATS0', 'ATSP0'],
  basicData: ['010C', '010D', '0105', '010F', '0111'],
  info: ['ATI', 'ATRV', 'ATDP', '0902'],
};

const RealCarTestApp: React.FC = () => {
  const [devices, setDevices] = useState<Peripheral[]>([]);
  const [connectedDevice, setConnectedDevice] = useState<string | null>(null);
  const [status, setStatus] = useState('–ü–æ–∏—Å–∫ ELM327 –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...');
  const [command, setCommand] = useState('ATZ');
  const [responses, setResponses] = useState<string[]>([]);
  const [isConnected, setIsConnected] = useState(false);
  const [_testResults, _setTestResults] = useState<any>({});

  const SERVICE_UUID = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';
  const RX_UUID = '6e400002-b5a3-f393-e0a9-e50e24dcca9e'; // iOS ‚Üí ELM327
  const TX_UUID = '6e400003-b5a3-f393-e0a9-e50e24dcca9e'; // ELM327 ‚Üí iOS

  const addResponse = useCallback((response: string) => {
    setResponses(prev => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${response}`,
    ]);
  }, []);

  const scanForELM327 = useCallback(async () => {
    try {
      await BleManager.scan([], 15, true);

      setTimeout(async () => {
        const foundDevices = await BleManager.getDiscoveredPeripherals();

        // –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å ELM327
        const elm327Devices = foundDevices.filter(
          device =>
            device.name &&
            (device.name.toLowerCase().includes('elm327') ||
              device.name.toLowerCase().includes('obd') ||
              device.name.toLowerCase().includes('can') ||
              device.name.toLowerCase().includes('car') ||
              device.name.toLowerCase().includes('auto') ||
              device.name.toLowerCase().includes('obdii') ||
              device.name.toLowerCase().includes('elm') ||
              // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∞–¥–∞–ø—Ç–µ—Ä—ã:
              device.name.toLowerCase().includes('vgate') ||
              device.name.toLowerCase().includes('veepeak') ||
              device.name.toLowerCase().includes('obdlink')),
        );

        setDevices(elm327Devices);
        setStatus(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö ELM327: ${elm327Devices.length}`);

        if (elm327Devices.length === 0) {
          setStatus(
            '‚ùå ELM327 –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–¥–∞–ø—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω –∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è.',
          );
        }
      }, 15000);
    } catch (error: any) {
      setStatus('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
  }, []);

  useEffect(() => {
    const initialize = async () => {
      try {
        await BleManager.start({ showAlert: false });
        setStatus('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ELM327 –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...');
        scanForELM327();
      } catch (error: any) {
        setStatus('‚ùå –û—à–∏–±–∫–∞ BLE: ' + error.message);
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º listener –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç ELM327
    const listener = DeviceEventEmitter.addListener(
      'BleManagerDidUpdateValueForCharacteristic',
      ({
        characteristic,
        value,
      }: {
        characteristic: string;
        value: number[];
      }) => {
        if (characteristic === TX_UUID) {
          const response = String.fromCharCode(...value);
          addResponse(`ELM327: ${response.trim()}`);
        }
      },
    );

    initialize();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => listener.remove();
  }, [addResponse, scanForELM327]);

  const connectToELM327 = async (deviceId: string) => {
    try {
      setStatus('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ELM327...');
      addResponse(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${deviceId}`);

      await BleManager.connect(deviceId);
      await BleManager.retrieveServices(deviceId);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç ELM327
      await BleManager.startNotification(deviceId, SERVICE_UUID, TX_UUID);

      setConnectedDevice(deviceId);
      setIsConnected(true);
      setStatus('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ELM327! –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.');

      addResponse('=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û ===');
      addResponse('‚ö†Ô∏è  –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –ú–ê–®–ò–ù–ê –ó–ê–í–ï–î–ï–ù–ê!');
      addResponse('‚ö†Ô∏è  ELM327 –ü–û–î–ö–õ–Æ–ß–ï–ù –ö OBD –ü–û–†–¢–£!');
    } catch (error: any) {
      setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
      Alert.alert(
        '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ELM327. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç BLE –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è.',
      );
    }
  };

  const sendRealCommand = async (cmd: string) => {
    if (!connectedDevice || !isConnected) {
      Alert.alert('–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ ELM327');
      return;
    }

    try {
      const commandWithCR = cmd.trim() + '\r';
      const data = Array.from(commandWithCR).map(char => char.charCodeAt(0));

      await BleManager.write(
        connectedDevice,
        SERVICE_UUID,
        RX_UUID,
        data,
        data.length,
      );

      addResponse(`–û–¢–ü–†–ê–í–õ–ï–ù–û: ${cmd}`);
      setCommand('');
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', error.message);
      addResponse(`–û–®–ò–ë–ö–ê: ${error.message}`);
    }
  };

  const runQuickTest = async () => {
    addResponse('\nüöó === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ ELM327 –í –ú–ê–®–ò–ù–ï ===');
    addResponse('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...\n');

    for (let i = 0; i < REAL_TEST_COMMANDS.quickTest.length; i++) {
      const cmd = REAL_TEST_COMMANDS.quickTest[i];

      setTimeout(() => {
        let description = '';
        switch (cmd) {
          case 'ATZ':
            description = '(–°–±—Ä–æ—Å ELM327)';
            break;
          case 'ATE0':
            description = '(–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ö–æ)';
            break;
          case 'ATSP0':
            description = '(–ê–≤—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª)';
            break;
          case '0100':
            description = '(–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å ECU)';
            break;
          case '010C':
            description = '(–û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è)';
            break;
          case '010D':
            description = '(–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è)';
            break;
        }

        addResponse(`\n>>> –¢–µ—Å—Ç ${i + 1}/6: ${cmd} ${description}`);
        sendRealCommand(cmd);
      }, i * 2000);
    }
  };

  const runFullDiagnostic = async () => {
    addResponse('\nüîß === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ú–û–ë–ò–õ–Ø ===');
    addResponse('–°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n');

    const allCommands = [
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      ...REAL_TEST_COMMANDS.initialization,
      // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      '0100',
      '0120',
      '0140', // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ PID
      '010C',
      '010D',
      '0105',
      '010F',
      '0111', // –î–∞–Ω–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è
      '010A',
      '0142',
      '0143', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      'ATI',
      'ATRV',
      'ATDP',
      // VIN –∏ –æ—à–∏–±–∫–∏
      '0902',
      '03',
      '07',
    ];

    allCommands.forEach((cmd, index) => {
      setTimeout(() => {
        addResponse(`\n>>> –ö–æ–º–∞–Ω–¥–∞ ${index + 1}/${allCommands.length}: ${cmd}`);
        sendRealCommand(cmd);
      }, index * 1500);
    });
  };

  const _parseELM327Response = (response: string, cmd: string) => {
    // –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç ELM327
    let parsed = '';

    if (cmd === '010C' && response.includes('41 0C')) {
      // RPM —Ä–∞—Å—á–µ—Ç
      const match = response.match(/41 0C ([A-F0-9]{2}) ([A-F0-9]{2})/);
      if (match) {
        const A = parseInt(match[1], 16);
        const B = parseInt(match[2], 16);
        const rpm = (A * 256 + B) / 4;
        parsed = `RPM: ${rpm} –æ–±/–º–∏–Ω`;
      }
    } else if (cmd === '010D' && response.includes('41 0D')) {
      // –°–∫–æ—Ä–æ—Å—Ç—å
      const match = response.match(/41 0D ([A-F0-9]{2})/);
      if (match) {
        const speed = parseInt(match[1], 16);
        parsed = `–°–∫–æ—Ä–æ—Å—Ç—å: ${speed} –∫–º/—á`;
      }
    } else if (cmd === '0105' && response.includes('41 05')) {
      // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏
      const match = response.match(/41 05 ([A-F0-9]{2})/);
      if (match) {
        const temp = parseInt(match[1], 16) - 40;
        parsed = `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –û–ñ: ${temp}¬∞C`;
      }
    } else if (cmd === '010F' && response.includes('41 0F')) {
      // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞
      const match = response.match(/41 0F ([A-F0-9]{2})/);
      if (match) {
        const temp = parseInt(match[1], 16) - 40;
        parsed = `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: ${temp}¬∞C`;
      }
    }

    return parsed;
  };

  const disconnect = async () => {
    if (connectedDevice) {
      try {
        await BleManager.disconnect(connectedDevice);
        setConnectedDevice(null);
        setIsConnected(false);
        setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç ELM327');
        addResponse('=== –°–û–ï–î–ò–ù–ï–ù–ò–ï –†–ê–ó–û–†–í–ê–ù–û ===');
      } catch (error) {
        console.log('Disconnect error:', error);
      }
    }
  };

  const clearLog = () => {
    setResponses([]);
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>üöó –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ELM327</Text>
      <Text style={styles.subtitle}>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π –º–∞—à–∏–Ω–µ</Text>

      <Text style={styles.status}>{status}</Text>

      {!isConnected ? (
        <View>
          <View style={styles.button}>
            <Button title="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å ELM327" onPress={scanForELM327} />
          </View>

          <FlatList
            data={devices}
            keyExtractor={item => item.id}
            renderItem={({ item }) => (
              <View style={styles.deviceContainer}>
                <Text style={styles.deviceName}>
                  üöó {item.name || 'ELM327 Device'}
                </Text>
                <Text style={styles.deviceId}>ID: {item.id}</Text>
                {item.rssi && (
                  <Text style={styles.deviceRssi}>–°–∏–≥–Ω–∞–ª: {item.rssi} dBm</Text>
                )}
                <Button
                  title="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
                  onPress={() => connectToELM327(item.id)}
                />
              </View>
            )}
          />

          <View style={styles.helpContainer}>
            <Text style={styles.helpTitle}>‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:</Text>
            <Text style={styles.helpText}>
              ‚Ä¢ –ó–∞–≤–µ–¥–∏—Ç–µ –º–∞—à–∏–Ω—É (–¥–≤–∏–≥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å){'\n'}‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ
              ELM327 –∫ OBD –ø–æ—Ä—Ç—É{'\n'}‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ELM327 –≤ —Ä–µ–∂–∏–º–µ —Å–æ–ø—Ä—è–∂–µ–Ω–∏—è
              {'\n'}‚Ä¢ –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä
            </Text>
          </View>
        </View>
      ) : (
        <View style={styles.connectedContainer}>
          <Text style={styles.connectedText}>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ELM327</Text>

          <View style={styles.commandContainer}>
            <TextInput
              style={styles.commandInput}
              value={command}
              onChangeText={setCommand}
              placeholder="OBD –∫–æ–º–∞–Ω–¥–∞ (ATZ, 010C, 010D)"
              placeholderTextColor="#999"
            />
            <Button
              title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
              onPress={() => sendRealCommand(command)}
            />
          </View>

          <View style={styles.buttonRow}>
            <Button title="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç" onPress={runQuickTest} />
            <Button title="üîß –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" onPress={runFullDiagnostic} />
          </View>

          <View style={styles.buttonRow}>
            <Button title="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥" onPress={clearLog} />
            <Button
              title="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è"
              onPress={disconnect}
              color="#ff6b6b"
            />
          </View>

          <Text style={styles.responsesTitle}>üì° –õ–æ–≥ –æ–±—â–µ–Ω–∏—è —Å ELM327:</Text>
          <ScrollView style={styles.responsesContainer}>
            {responses.map((response, index) => (
              <Text key={index} style={styles.responseText}>
                {response}
              </Text>
            ))}
          </ScrollView>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#000' },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#00ff00',
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 14,
    color: '#ffff00',
    textAlign: 'center',
    marginBottom: 16,
  },
  status: {
    marginBottom: 16,
    fontSize: 16,
    color: '#00ffff',
    textAlign: 'center',
    backgroundColor: '#003333',
    padding: 10,
    borderRadius: 5,
  },
  button: { marginVertical: 8 },
  deviceContainer: {
    backgroundColor: '#001100',
    padding: 12,
    marginVertical: 4,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#00ff00',
  },
  deviceName: { fontSize: 16, fontWeight: '600', color: '#00ff00' },
  deviceId: { fontSize: 14, color: '#cccccc', marginTop: 2 },
  deviceRssi: { fontSize: 12, color: '#999999', marginTop: 2, marginBottom: 8 },
  connectedContainer: { flex: 1 },
  connectedText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#00ff00',
    textAlign: 'center',
    marginBottom: 20,
    backgroundColor: '#003300',
    padding: 10,
    borderRadius: 5,
  },
  commandContainer: {
    flexDirection: 'row',
    marginBottom: 10,
    alignItems: 'center',
  },
  commandInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#333',
    padding: 10,
    marginRight: 10,
    borderRadius: 5,
    backgroundColor: '#111',
    color: '#fff',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 10,
  },
  responsesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#00ffff',
  },
  responsesContainer: {
    flex: 1,
    backgroundColor: '#000',
    padding: 10,
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#333',
  },
  responseText: {
    color: '#00ff00',
    fontFamily: 'Courier',
    fontSize: 12,
    marginBottom: 2,
  },
  helpContainer: {
    padding: 12,
    backgroundColor: '#330000',
    borderRadius: 8,
    marginTop: 16,
    borderWidth: 1,
    borderColor: '#ff0000',
  },
  helpTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ff0000',
    marginBottom: 4,
  },
  helpText: {
    fontSize: 12,
    color: '#ffcccc',
    lineHeight: 16,
  },
});

export default RealCarTestApp;
