import React, { useEffect, useState } from 'react';
import {
  SafeAreaView,
  Text,
  Button,
  FlatList,
  StyleSheet,
  View,
  Platform,
  PermissionsAndroid,
  Alert,
} from 'react-native';
import BleManager, { Peripheral } from 'react-native-ble-manager';
import { BluetoothDevice } from 'react-native-bluetooth-classic';

let RNBluetoothClassic: any;
if (Platform.OS === 'android') {
  RNBluetoothClassic = require('react-native-bluetooth-classic').default;
}

const App: React.FC = () => {
  const [devices, setDevices] = useState<(Peripheral | BluetoothDevice)[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [status, setStatus] = useState('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
  const [bluetoothState, setBluetoothState] = useState('unknown');

  useEffect(() => {
    if (Platform.OS === 'ios') {
      initializeBLE();
    } else {
      setStatus('Classic Bluetooth –Ω–∞ Android');
    }
  }, []);

  const initializeBLE = async () => {
    try {
      await BleManager.start({ showAlert: false });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth
      const isEnabled = await BleManager.checkState();
      console.log('Bluetooth —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', isEnabled);
      setBluetoothState(isEnabled);

      if (isEnabled === 'on') {
        setStatus('‚úÖ BLE Manager –≥–æ—Ç–æ–≤, Bluetooth –≤–∫–ª—é—á–µ–Ω');
      } else {
        setStatus('‚ùå Bluetooth –≤—ã–∫–ª—é—á–µ–Ω - –≤–∫–ª—é—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        setError('–í–∫–ª—é—á–∏—Ç–µ Bluetooth –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö iPhone');
      }
    } catch (err: any) {
      setError('–û—à–∏–±–∫–∞ BLE: ' + err.message);
      console.error('BLE Error:', err);
    }
  };

  const checkBluetoothState = async () => {
    if (Platform.OS === 'ios') {
      try {
        const state = await BleManager.checkState();
        setBluetoothState(state);
        Alert.alert('–°–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth', `–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
      } catch (catchError: any) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ' + catchError.message);
      }
    }
  };

  const scan = async () => {
    setError(null);
    setDevices([]);

    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
        );
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
          setError('Bluetooth —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –≤—ã–¥–∞–Ω–æ');
          return;
        }
        const bonded = await RNBluetoothClassic.getBondedDevices();
        setDevices(bonded);
        setStatus(`–ù–∞–π–¥–µ–Ω–æ ${bonded.length} —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
      } catch (err: any) {
        setError('–û—à–∏–±–∫–∞ Android Bluetooth: ' + err.message);
      }
    } else {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const state = await BleManager.checkState();
        if (state !== 'on') {
          setError('Bluetooth –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
          return;
        }

        setStatus('üîç –ù–∞—á–∏–Ω–∞–µ–º BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        console.log('Starting BLE scan...');

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        await BleManager.scan([], 10, true);

        setTimeout(async () => {
          try {
            const found = await BleManager.getDiscoveredPeripherals();
            console.log('Found devices:', found);
            setDevices(found);
            setStatus(`‚úÖ –ù–∞–π–¥–µ–Ω–æ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${found.length}`);

            if (found.length === 0) {
              setStatus(
                '‚ùå BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –µ—Å—Ç—å BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.',
              );
            }
          } catch (fetchError: any) {
            setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ' + fetchError.message);
          }
        }, 10000);
      } catch (err: any) {
        setError('–û—à–∏–±–∫–∞ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + err.message);
        console.error('Scan error:', err);
      }
    }
  };

  const showConnected = async () => {
    setError(null);
    setDevices([]);

    if (Platform.OS === 'ios') {
      try {
        const connected = await BleManager.getConnectedPeripherals([]);
        setDevices(connected);
        setStatus(
          `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏): ${connected.length}`,
        );

        if (connected.length === 0) {
          setStatus(
            '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          );
        }
      } catch (err: any) {
        setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö BLE: ' + err.message);
      }
    } else {
      try {
        const connected = await RNBluetoothClassic.getConnectedDevices();
        setDevices(connected);
        setStatus(`Classic –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${connected.length}`);
      } catch (err: any) {
        setError('–û—à–∏–±–∫–∞ Android Bluetooth: ' + err.message);
      }
    }
  };

  const showConnectedByUUIDs = async () => {
    setError(null);
    setDevices([]);

    if (Platform.OS !== 'ios') {
      setError('–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ iOS');
      return;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ UUID –¥–ª—è CAN –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const uuids = [
      '180D', // Heart Rate (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      '180F', // Battery
      '180A', // Device Info
      'FFF0', // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ CAN –∞–¥–∞–ø—Ç–µ—Ä—ã
      '6E400001-B5A3-F393-E0A9-E50E24DCCA9E', // Nordic UART Service
    ];

    try {
      const connected = await BleManager.getConnectedPeripherals(uuids);
      setDevices(connected);
      setStatus(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ø–æ CAN/Auto UUID: ${connected.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
    } catch (err: any) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ UUID: ' + err.message);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>üì° Bluetooth –°–∫–∞–Ω–µ—Ä –¥–ª—è CAN</Text>
      <Text>{Platform.OS === 'ios' ? 'BLE (iOS)' : 'Classic (Android)'}</Text>
      <Text style={styles.status}>{status}</Text>
      <Text style={styles.bluetoothState}>Bluetooth: {bluetoothState}</Text>
      {error && <Text style={styles.error}>‚ùå {error}</Text>}

      <View style={styles.button}>
        <Button title="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" onPress={scan} />
      </View>
      <View style={styles.button}>
        <Button title="üì± –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ" onPress={showConnected} />
      </View>
      <View style={styles.button}>
        <Button title="üöó –ü–æ–∏—Å–∫ –ø–æ CAN UUID" onPress={showConnectedByUUIDs} />
      </View>
      <View style={styles.button}>
        <Button
          title="‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth"
          onPress={checkBluetoothState}
        />
      </View>

      <FlatList
        data={devices}
        keyExtractor={(item, index) =>
          (item as Peripheral)?.id ??
          (item as BluetoothDevice)?.address ??
          index.toString()
        }
        renderItem={({ item }) => (
          <View style={styles.deviceContainer}>
            <Text style={styles.deviceName}>
              {(item as Peripheral).name ??
                (item as BluetoothDevice).name ??
                '–ë–µ–∑ –∏–º–µ–Ω–∏'}
            </Text>
            <Text style={styles.deviceId}>
              ID: {(item as Peripheral).id ?? (item as BluetoothDevice).address}
            </Text>
            {(item as Peripheral).rssi && (
              <Text style={styles.deviceRssi}>
                –°–∏–≥–Ω–∞–ª: {(item as Peripheral).rssi} dBm
              </Text>
            )}
          </View>
        )}
      />

      {devices.length === 0 && !error && (
        <View style={styles.helpContainer}>
          <Text style={styles.helpTitle}>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</Text>
          <Text style={styles.helpText}>
            ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Bluetooth –≤–∫–ª—é—á–µ–Ω{'\n'}‚Ä¢ –î–ª—è CAN –Ω—É–∂–Ω—ã BLE-–∞–¥–∞–ø—Ç–µ—Ä—ã
            (–Ω–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Bluetooth){'\n'}‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ BLE
            —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏{'\n'}‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ä–µ–∂–∏–º–µ
            –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è{'\n'}‚Ä¢ –ù–∞ iOS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Bluetooth SPP
          </Text>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#f5f5f5' },
  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 12, color: '#333' },
  status: { marginBottom: 8, fontSize: 16, color: '#666' },
  bluetoothState: {
    marginBottom: 8,
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '600',
  },
  error: {
    color: 'red',
    marginVertical: 10,
    backgroundColor: '#ffebee',
    padding: 10,
    borderRadius: 5,
  },
  button: { marginVertical: 6 },
  deviceContainer: {
    backgroundColor: 'white',
    padding: 12,
    marginVertical: 4,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  deviceName: { fontSize: 16, fontWeight: '600', color: '#333' },
  deviceId: { fontSize: 14, color: '#666', marginTop: 2 },
  deviceRssi: { fontSize: 12, color: '#999', marginTop: 2 },
  helpContainer: {
    marginTop: 20,
    padding: 16,
    backgroundColor: '#e3f2fd',
    borderRadius: 8,
  },
  helpTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1976d2',
    marginBottom: 8,
  },
  helpText: { fontSize: 14, color: '#424242', lineHeight: 20 },
});
export default App;
