import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Alert,
  TextInput,
  Animated,
  PermissionsAndroid,
  Platform,
  DeviceEventEmitter,
  EmitterSubscription,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import BleManager from 'react-native-ble-manager';

interface BluetoothDevice {
  id: string;
  name?: string;
  rssi?: number;
  rawData?: any;
}

interface ActionButtonProps {
  title: string;
  icon: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'danger';
}

const ActionButton: React.FC<ActionButtonProps> = ({
  title,
  icon,
  onPress,
  variant = 'primary',
}) => (
  <TouchableOpacity
    style={[
      styles.actionButton,
      variant === 'primary' && styles.primaryButton,
      variant === 'secondary' && styles.secondaryButton,
      variant === 'danger' && styles.dangerButton,
    ]}
    onPress={onPress}
  >
    <Text style={[styles.actionButtonIcon]}>{icon}</Text>
    <Text
      style={[
        styles.actionButtonText,
        variant === 'primary' && styles.primaryButtonText,
        variant === 'secondary' && styles.secondaryButtonText,
        variant === 'danger' && styles.dangerButtonText,
      ]}
    >
      {title}
    </Text>
  </TouchableOpacity>
);

const OBDScannerScreen: React.FC = () => {
  const [devices, setDevices] = useState<BluetoothDevice[]>([]);
  const [connectedDevice, setConnectedDevice] = useState<string | null>(null);
  const [status, setStatus] = useState<string>('–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é');
  const [command, setCommand] = useState<string>('');
  const [responses, setResponses] = useState<string[]>([]);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [isScanning, setIsScanning] = useState<boolean>(false);
  const [scanAnimation] = useState(new Animated.Value(0));
  const [pulseAnimation] = useState(new Animated.Value(1));

  // –í–æ–∑–º–æ–∂–Ω—ã–µ UUID –¥–ª—è ELM327 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const POSSIBLE_SERVICE_UUIDS = [
    '6e400001-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART Service
    'fff0', // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ELM327
    '0000fff0-0000-1000-8000-00805f9b34fb', // ELM327 BLE
    '00001101-0000-1000-8000-00805f9b34fb', // Serial Port Profile
  ];

  const POSSIBLE_RX_UUIDS = [
    '6e400002-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART RX
    'fff1', // ELM327 RX
    '0000fff1-0000-1000-8000-00805f9b34fb',
  ];

  const POSSIBLE_TX_UUIDS = [
    '6e400003-b5a3-f393-e0a9-e50e24dcca9e', // Nordic UART TX
    'fff2', // ELM327 TX
    '0000fff2-0000-1000-8000-00805f9b34fb',
  ];

  // –¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—á–∏–µ UUID (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
  const [currentServiceUUID, setCurrentServiceUUID] = useState<string>('');
  const [currentRxUUID, setCurrentRxUUID] = useState<string>('');
  const [currentTxUUID, setCurrentTxUUID] = useState<string>('');

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const startScanAnimation = useCallback(() => {
    Animated.loop(
      Animated.timing(scanAnimation, {
        toValue: 1,
        duration: 2000,
        useNativeDriver: true,
      }),
    ).start();
  }, [scanAnimation]);

  const stopScanAnimation = useCallback(() => {
    scanAnimation.stopAnimation();
    scanAnimation.setValue(0);
  }, [scanAnimation]);

  const startPulseAnimation = useCallback(() => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(pulseAnimation, {
          toValue: 1.2,
          duration: 1000,
          useNativeDriver: true,
        }),
        Animated.timing(pulseAnimation, {
          toValue: 1,
          duration: 1000,
          useNativeDriver: true,
        }),
      ]),
    ).start();
  }, [pulseAnimation]);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android
  const requestPermissions = useCallback(async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
          PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
        ]);

        const allGranted = Object.values(granted).every(
          permission => permission === PermissionsAndroid.RESULTS.GRANTED,
        );

        if (!allGranted) {
          Alert.alert(
            '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è',
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Bluetooth –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
          );
          return false;
        }
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
        return false;
      }
    }
    return true;
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLE
  const initializeBLE = useCallback(async () => {
    try {
      console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BLE ===');

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      const hasPermissions = await requestPermissions();
      if (!hasPermissions) {
        setStatus('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
        return;
      }

      setStatus('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLE...');
      await BleManager.start({ showAlert: false });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth
      const state = await BleManager.checkState();
      console.log('BLE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);

      if (state !== 'on') {
        Alert.alert('–û—à–∏–±–∫–∞', '–í–∫–ª—é—á–∏—Ç–µ Bluetooth –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        setStatus('Bluetooth –≤—ã–∫–ª—é—á–µ–Ω');
        return;
      }

      console.log('BLE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      setStatus('BLE –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BLE:', error);
      setStatus(`–û—à–∏–±–∫–∞ BLE: ${error.message}`);
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å BLE: ${error.message}`,
      );
    }
  }, [requestPermissions]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const stopScan = useCallback(async () => {
    try {
      await BleManager.stopScan();
      setIsScanning(false);
      stopScanAnimation();
      setStatus(`–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}`);
      console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }, [devices.length, stopScanAnimation]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ ELM327
  const isPotentialELM327 = (peripheral: any): boolean => {
    const name = (peripheral.name || '').toLowerCase();
    const localName = (peripheral.advertising?.localName || '').toLowerCase();

    const elm327Keywords = [
      'elm',
      'obd',
      'obdii',
      'v-link',
      'vlink',
      'vgate',
      'scan',
      'auto',
      'car',
      'diag',
      'ecu',
      'can',
      'bluetooth',
    ];

    return elm327Keywords.some(
      keyword => name.includes(keyword) || localName.includes(keyword),
    );
  };

  // –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const startScan = useCallback(async () => {
    if (isScanning) {
      await stopScan();
      return;
    }

    try {
      console.log('=== –ù–ê–ß–ê–õ–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===');

      setDevices([]);
      setIsScanning(true);
      setStatus('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      startScanAnimation();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth
      const state = await BleManager.checkState();
      console.log('Bluetooth —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º:', state);

      if (state !== 'on') {
        throw new Error('Bluetooth –≤—ã–∫–ª—é—á–µ–Ω');
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      const handleDiscoverPeripheral = (peripheral: any) => {
        console.log('=== –û–ë–ù–ê–†–£–ñ–ï–ù–û –£–°–¢–†–û–ô–°–¢–í–û ===');
        console.log('ID:', peripheral.id);
        console.log('Name:', peripheral.name);
        console.log('LocalName:', peripheral.advertising?.localName);
        console.log('RSSI:', peripheral.rssi);
        console.log('IsConnectable:', peripheral.advertising?.isConnectable);
        console.log('ServiceUUIDs:', peripheral.advertising?.serviceUUIDs);
        console.log(
          'ManufacturerData:',
          peripheral.advertising?.manufacturerData,
        );
        console.log('Raw –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(peripheral, null, 2));

        const isELM327Candidate = isPotentialELM327(peripheral);
        console.log('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π ELM327:', isELM327Candidate);

        // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –ø–æ–º–µ—á–∞–µ–º ELM327 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        setDevices(current => {
          const exists = current.find(device => device.id === peripheral.id);
          if (!exists) {
            const deviceName =
              peripheral.name ||
              peripheral.advertising?.localName ||
              `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${peripheral.id.slice(-4)}`;

            return [
              ...current,
              {
                id: peripheral.id,
                name: isELM327Candidate ? `üöó ${deviceName}` : deviceName,
                rssi: peripheral.rssi,
                rawData: peripheral,
              },
            ];
          }
          return current;
        });
      };

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
      const subscription: EmitterSubscription = DeviceEventEmitter.addListener(
        'BleManagerDiscoverPeripheral',
        handleDiscoverPeripheral,
      );

      // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (60 —Å–µ–∫—É–Ω–¥, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã)
      console.log('–ó–∞–ø—É—Å–∫ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      await BleManager.scan([], 60, true);
      console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        await stopScan();
        subscription.remove();
      }, 60000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setStatus(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      setIsScanning(false);
      stopScanAnimation();
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${error.message}`,
      );
    }
  }, [isScanning, startScanAnimation, stopScan, isPotentialELM327]);

  // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö UUID —Å–µ—Ä–≤–∏—Å–æ–≤
  const findWorkingUUIDs = async (
    deviceId: string,
  ): Promise<{ service: string; rx: string; tx: string } | null> => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
      const peripheralInfo = await BleManager.retrieveServices(deviceId);
      console.log(
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:',
        JSON.stringify(peripheralInfo, null, 2),
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      for (const serviceUUID of POSSIBLE_SERVICE_UUIDS) {
        const service = peripheralInfo.services?.find(
          s => s.uuid.toLowerCase() === serviceUUID.toLowerCase(),
        );

        if (service) {
          console.log(`–ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–∏—Å: ${serviceUUID}`);

          // –ò—â–µ–º RX –∏ TX —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
          for (const rxUUID of POSSIBLE_RX_UUIDS) {
            for (const txUUID of POSSIBLE_TX_UUIDS) {
              const rxChar = service.characteristics?.find(
                c => c.characteristic.toLowerCase() === rxUUID.toLowerCase(),
              );
              const txChar = service.characteristics?.find(
                c => c.characteristic.toLowerCase() === txUUID.toLowerCase(),
              );

              if (rxChar && txChar) {
                console.log(
                  `–ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ UUID: service=${serviceUUID}, rx=${rxUUID}, tx=${txUUID}`,
                );
                return { service: serviceUUID, rx: rxUUID, tx: txUUID };
              }
            }
          }
        }
      }

      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ UUID:', error);
      return null;
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
  const connectToDevice = useCallback(
    async (deviceId: string, deviceName?: string) => {
      try {
        console.log(`=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –£–°–¢–†–û–ô–°–¢–í–£ ${deviceId} ===`);
        setStatus(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${deviceName || deviceId}...`);

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        console.log('1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        await BleManager.connect(deviceId);
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É');

        // –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö UUID
        console.log('2. –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
        const workingUUIDs = await findWorkingUUIDs(deviceId);

        if (!workingUUIDs) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã UART');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–µ UUID
        setCurrentServiceUUID(workingUUIDs.service);
        setCurrentRxUUID(workingUUIDs.rx);
        setCurrentTxUUID(workingUUIDs.tx);

        console.log('3. –í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è TX —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
        await BleManager.startNotification(
          deviceId,
          workingUUIDs.service,
          workingUUIDs.tx,
        );
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');

        setConnectedDevice(deviceId);
        setIsConnected(true);
        setStatus(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${deviceName || deviceId}`);
        startPulseAnimation();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ELM327 —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          initializeELM327();
        }, 2000);

        Alert.alert('–£—Å–ø–µ—Ö!', `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${deviceName || deviceId}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        setStatus(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
        Alert.alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', error.message);
      }
    },
    [startPulseAnimation],
  );

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const disconnectDevice = useCallback(async () => {
    if (connectedDevice) {
      try {
        console.log('=== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï ===');

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (currentServiceUUID && currentTxUUID) {
          await BleManager.stopNotification(
            connectedDevice,
            currentServiceUUID,
            currentTxUUID,
          );
        }

        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        await BleManager.disconnect(connectedDevice);

        setConnectedDevice(null);
        setIsConnected(false);
        setStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ');
        setResponses([]);
        setCurrentServiceUUID('');
        setCurrentRxUUID('');
        setCurrentTxUUID('');

        pulseAnimation.stopAnimation();
        pulseAnimation.setValue(1);

        Alert.alert('–£—Å–ø–µ—Ö', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è');
      }
    }
  }, [connectedDevice, currentServiceUUID, currentTxUUID, pulseAnimation]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é
  const sendCommandDirect = useCallback(
    async (cmd: string): Promise<void> => {
      if (!connectedDevice || !currentServiceUUID || !currentRxUUID) {
        throw new Error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ UUID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
      }

      try {
        const commandWithCR = cmd.trim() + '\r';
        const data = Array.from(commandWithCR, char => char.charCodeAt(0));

        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${cmd}`);
        await BleManager.write(
          connectedDevice,
          currentServiceUUID,
          currentRxUUID,
          data,
        );
        console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${cmd}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
        throw error;
      }
    },
    [connectedDevice, currentServiceUUID, currentRxUUID],
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ELM327
  const initializeELM327 = useCallback(async () => {
    if (!connectedDevice) return;

    try {
      console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ELM327 ===');
      setResponses(current => [...current, 'üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ELM327...']);

      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const initCommands = [
        'ATZ', // –°–±—Ä–æ—Å
        'ATE0', // –û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ö–æ
        'ATL0', // –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        'ATS0', // –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã
        'ATH1', // –í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        'ATSP0', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª
        'ATRV', // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
      ];

      for (let i = 0; i < initCommands.length; i++) {
        const cmd = initCommands[i];
        setResponses(current => [...current, `> ${cmd}`]);

        try {
          await sendCommandDirect(cmd);
          await new Promise(resolve => setTimeout(resolve, 1000));
          setResponses(current => [...current, `‚úÖ ${cmd} - OK`]);
        } catch (error) {
          setResponses(current => [
            ...current,
            `‚ùå ${cmd} - ERROR: ${error.message}`,
          ]);
        }
      }

      setResponses(current => [...current, 'üéâ ELM327 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!']);
      setStatus('ELM327 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ELM327:', error);
      setResponses(current => [
        ...current,
        `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`,
      ]);
      setStatus('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ELM327');
    }
  }, [connectedDevice, sendCommandDirect]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ UI
  const sendCommand = useCallback(async () => {
    if (!connectedDevice || !command.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    try {
      setResponses(current => [...current, `> ${command}`]);
      await sendCommandDirect(command);
      setCommand('');

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
      setTimeout(() => {
        setResponses(current => [
          ...current,
          'üì° –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–æ—Ç–≤–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
        ]);
      }, 500);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      setResponses(current => [...current, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`]);
    }
  }, [connectedDevice, command, sendCommandDirect]);

  // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const quickCommands = [
    { title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏', cmd: '01 00', icon: 'üîó' },
    { title: 'VIN –Ω–æ–º–µ—Ä', cmd: '09 02', icon: 'üÜî' },
    { title: '–û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è', cmd: '01 0C', icon: '‚ö°' },
    { title: '–°–∫–æ—Ä–æ—Å—Ç—å', cmd: '01 0D', icon: 'üèÉ' },
    { title: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –û–ñ', cmd: '01 05', icon: 'üå°Ô∏è' },
  ];

  const sendQuickCommand = useCallback(
    (cmd: string) => {
      setCommand(cmd);
      sendCommand();
    },
    [sendCommand],
  );

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
  const clearResponses = useCallback(() => {
    setResponses([]);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    initializeBLE();

    return () => {
      if (isScanning) {
        BleManager.stopScan();
      }
      DeviceEventEmitter.removeAllListeners('BleManagerDiscoverPeripheral');
      DeviceEventEmitter.removeAllListeners(
        'BleManagerDidUpdateValueForCharacteristic',
      );
    };
  }, [initializeBLE, isScanning]);

  // –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const renderDevice = ({ item }: { item: BluetoothDevice }) => (
    <TouchableOpacity
      style={styles.deviceItem}
      onPress={() => connectToDevice(item.id, item.name)}
    >
      <View style={styles.deviceInfo}>
        <Text style={styles.deviceName}>
          {item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}
        </Text>
        <Text style={styles.deviceId}>ID: {item.id}</Text>
        {item.rssi && (
          <Text style={styles.deviceRssi}>RSSI: {item.rssi} dBm</Text>
        )}
      </View>
      <Text style={styles.connectIcon}>üì±</Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAwareScrollView style={styles.scrollView}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
        <View style={styles.header}>
          <Text style={styles.title}>üöó OBD2 ELM327 Scanner</Text>
          <Animated.View
            style={[
              styles.statusContainer,
              isConnected && { transform: [{ scale: pulseAnimation }] },
            ]}
          >
            <Text
              style={[styles.status, isConnected && styles.connectedStatus]}
            >
              {isConnected ? 'üü¢' : 'üî¥'} {status}
            </Text>
          </Animated.View>
        </View>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <View style={styles.controlsContainer}>
          <ActionButton
            title={isScanning ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å'}
            icon={isScanning ? '‚èπÔ∏è' : 'üîç'}
            onPress={startScan}
            variant="primary"
          />

          {isConnected && (
            <ActionButton
              title="–û—Ç–∫–ª—é—á–∏—Ç—å"
              icon="üîå"
              onPress={disconnectDevice}
              variant="danger"
            />
          )}
        </View>

        {/* –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {devices.length > 0 && (
          <View style={styles.devicesContainer}>
            <Text style={styles.sectionTitle}>
              üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({devices.length})
            </Text>
            <FlatList
              data={devices}
              renderItem={renderDevice}
              keyExtractor={item => item.id}
              style={styles.devicesList}
              scrollEnabled={false}
            />
          </View>
        )}

        {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
        {isConnected && (
          <View style={styles.quickCommandsContainer}>
            <Text style={styles.sectionTitle}>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã</Text>
            <View style={styles.quickCommandsGrid}>
              {quickCommands.map((item, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.quickCommandButton}
                  onPress={() => sendQuickCommand(item.cmd)}
                >
                  <Text style={styles.quickCommandIcon}>{item.icon}</Text>
                  <Text style={styles.quickCommandText}>{item.title}</Text>
                  <Text style={styles.quickCommandCode}>{item.cmd}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        )}

        {/* –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã */}
        {isConnected && (
          <View style={styles.commandContainer}>
            <Text style={styles.sectionTitle}>üíª –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥</Text>
            <View style={styles.commandInputContainer}>
              <TextInput
                style={styles.commandInput}
                value={command}
                onChangeText={setCommand}
                placeholder="–í–≤–µ–¥–∏—Ç–µ OBD –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01 00)"
                placeholderTextColor="#999"
                autoCapitalize="characters"
              />
              <TouchableOpacity style={styles.sendButton} onPress={sendCommand}>
                <Text style={styles.sendButtonText}>üì§</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {/* –õ–æ–≥ –æ—Ç–≤–µ—Ç–æ–≤ */}
        {responses.length > 0 && (
          <View style={styles.responsesContainer}>
            <View style={styles.responsesHeader}>
              <Text style={styles.sectionTitle}>üìã –õ–æ–≥ –∫–æ–º–∞–Ω–¥</Text>
              <TouchableOpacity
                style={styles.clearButton}
                onPress={clearResponses}
              >
                <Text style={styles.clearButtonText}>üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.responsesContent}>
              {responses.map((response, index) => (
                <Text key={index} style={styles.response}>
                  {response}
                </Text>
              ))}
            </View>
          </View>
        )}
      </KeyboardAwareScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
    marginBottom: 10,
  },
  statusContainer: {
    alignItems: 'center',
  },
  status: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  connectedStatus: {
    color: '#4CAF50',
    fontWeight: 'bold',
  },
  controlsContainer: {
    flexDirection: 'row',
    padding: 20,
    gap: 10,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 15,
    borderRadius: 10,
    gap: 8,
  },
  primaryButton: {
    backgroundColor: '#2196F3',
  },
  secondaryButton: {
    backgroundColor: '#FF9800',
  },
  dangerButton: {
    backgroundColor: '#F44336',
  },
  actionButtonIcon: {
    fontSize: 18,
  },
  actionButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  primaryButtonText: {
    color: '#fff',
  },
  secondaryButtonText: {
    color: '#fff',
  },
  dangerButtonText: {
    color: '#fff',
  },
  devicesContainer: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  devicesList: {
    maxHeight: 300,
  },
  deviceItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 15,
    marginBottom: 10,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  deviceInfo: {
    flex: 1,
  },
  deviceName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  deviceId: {
    fontSize: 12,
    color: '#666',
  },
  deviceRssi: {
    fontSize: 12,
    color: '#999',
  },
  connectIcon: {
    fontSize: 24,
  },
  quickCommandsContainer: {
    padding: 20,
  },
  quickCommandsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  quickCommandButton: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    width: '48%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  quickCommandIcon: {
    fontSize: 24,
    marginBottom: 5,
  },
  quickCommandText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 3,
  },
  quickCommandCode: {
    fontSize: 10,
    color: '#666',
    fontFamily: 'Courier',
  },
  commandContainer: {
    padding: 20,
  },
  commandInputContainer: {
    flexDirection: 'row',
    gap: 10,
  },
  commandInput: {
    flex: 1,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    fontFamily: 'Courier',
  },
  sendButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonText: {
    fontSize: 18,
  },
  responsesContainer: {
    padding: 20,
    paddingBottom: 40,
  },
  responsesHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  clearButton: {
    backgroundColor: '#FF5722',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 8,
  },
  clearButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  responsesContent: {
    backgroundColor: '#000',
    borderRadius: 10,
    padding: 15,
    maxHeight: 300,
  },
  response: {
    color: '#00FF00',
    fontSize: 12,
    fontFamily: 'Courier',
    marginBottom: 3,
  },
});

export default OBDScannerScreen;
